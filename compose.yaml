services:
  # inventory service
  inventory-service:
    build:
      context: inventory-service
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - inventory-service:/app
    environment:
      - POSTGRES_URL=postgresql+asyncpg://inventory:inventory@inventory-db:5432/inventory
    depends_on:
      inventory-db:
        condition: service_healthy
    command: sh -c "alembic upgrade head && uvicorn main:app --host 0.0.0.0 --port 8000"
    networks:
      - inventory-network

  # inventory service database
  inventory-db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: inventory
      POSTGRES_PASSWORD: inventory
      POSTGRES_DB: inventory
    ports:
      - "5434:5432"
    networks:
      - inventory-network
    volumes:
      - inventory-db:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory"]
      interval: 5s
      timeout: 5s
      retries: 5

  catalogue-mongo:
    image: mongo:latest
    container_name: mongo_catalogue
    ports:
      - "27017:27017" # MongoDB exposé en local
    environment:
      MONGO_INITDB_DATABASE: catalogue_db # BDD appelée "catalogue_db"
    volumes:
      - catalogue-mongo_data:/data/db
    networks:
      - inventory-network

  catalogue-api:
    build:
      context: catalogue-service
      dockerfile: Dockerfile
    container_name: catalogue_api
    ports:
      - "8081:8081" # Expose Express en local
    environment:
      - MONGO_URL=mongodb://catalogue-mongo:27017/catalogue_db # URL Mongo pour ton app
    depends_on:
      - catalogue-mongo # Lance Express après Mongo
    networks:
      - inventory-network

  # Adminer
  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=inventory-db
    networks:
      - inventory-network

volumes:
  inventory-db:
  inventory-service:
  catalogue-mongo_data:

networks:
  inventory-network:
    driver: bridge
